program hilbert;

rf_abs(r_x)
var {
    if(r_x <= 0.0){
        r_x:= -1.0 * r_x;
    };
    return r_x;
}

main
var r_n, r_i, r_j, r_k, r_normrow, r_pivot, r_size, r_biggest, r_mult, m_10_A, m_10_Ainv, m_10_LU, m_10_b, m_10_x,
m_10_scales,m_10_ps{
    r_n := 10.0;

    r_i := 1.0;
    while(r_i <= r_n - 1.0) {
        m_10_ps[r_i][0.0] := r_i;
        r_normrow := 0.0;

        r_j := 1.0;
        while(r_j <= r_n - 1.0){
            m_10_LU[r_i][r_j] := m_10_A[r_i][r_j];
            if(r_normrow <= rf_abs(m_10_LU[r_i][r_j])){
                r_normrow := rf_abs(m_10_LU[r_i][r_j]);
            };
            r_j := r_j + 1.0;
        };

        if(r_normrow != 0.0){
            m_10_scales[r_i][0.0] := 1.0/r_normrow;
        }
        else{
            m_10_scales[r_i][0.0] := 0.0;
        };
        r_i := r_i + 1.0;
    };


    r_k := 1.0;
    while(r_k <= r_n - 2.0){
        r_pivot := 0.0;
        r_biggest := 0.0;

        r_i := r_k;
        while(r_i <= r_n - 1.0){
            r_size := rf_abs(m_10_LU[m_10_ps[r_i][0.0]][r_k]) * m_10_scales[m_10_ps[r_i][0.0]][0.0];
            if(r_biggest <= r_size - 1.0){
                r_biggest := r_size;
                r_pivotindex := r_i;
            };
            r_i := r_i + 1.0;
        };

        r_k := r_k + 1.0;
    };
    print(r_i);
    print(r_k);
    print(m_10_LU);


}

